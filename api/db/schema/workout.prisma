model WorkoutTemplate {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  exercises WorkoutTemplateExercise[]
}

model WorkoutTemplateExercise {
  id    Int @id @default(autoincrement())
  order Int

  workout           WorkoutTemplate?             @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)
  workoutTemplateId Int?
  exercise          Exercise                     @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId        Int
  sets              WorkoutTemplateExerciseSet[]
}

model WorkoutTemplateExerciseSet {
  id            Int   @id @default(autoincrement())
  weightInKg    Float
  reps          Int
  restInSeconds Int

  exercise                  WorkoutTemplateExercise? @relation(fields: [workoutTemplateExerciseId], references: [id], onDelete: Cascade)
  workoutTemplateExerciseId Int?
}

model Workout {
  id                Int      @id @default(autoincrement())
  name              String
  date              DateTime @db.Date
  startTime         DateTime @db.Time
  endTime           DateTime @db.Time
  durationInSeconds Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  exercises WorkoutExercise[]
}

model WorkoutExercise {
  id    Int @id @default(autoincrement())
  order Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workout    Workout              @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId  Int
  exercise   Exercise             @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId Int
  sets       WorkoutExerciseSet[]
}

model WorkoutExerciseSet {
  id            Int   @id @default(autoincrement())
  weightInKg    Float
  reps          Int
  restInSeconds Int

  exercise   WorkoutExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId Int
}

model Exercise {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  instructions String[]
  gifPath      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workoutTemplateExercises WorkoutTemplateExercise[]
  workoutExercises         WorkoutExercise[]
}
