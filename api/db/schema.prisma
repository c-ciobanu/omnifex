datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  Int       @id @default(autoincrement())
  email               String?   @unique
  username            String    @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  metrics    Metric[]
  documents  Document[]
  movieLists MovieList[]
  bookLists  BookList[]
  workouts   Workout[]
}

model Movie {
  id               Int      @id @default(autoincrement())
  director         String
  genres           String[]
  imdbId           String   @unique
  originalLanguage String
  originalTitle    String
  overview         String
  rating           Decimal  @db.Decimal(3, 1)
  releaseDate      DateTime @db.Date
  runtime          Int
  tagline          String?
  title            String
  tmdbId           Int      @unique
  tmdbPosterPath   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listed MovieListItem[]
}

model MovieList {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  movies MovieListItem[]

  @@unique([userId, name])
}

model MovieListItem {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  list    MovieList @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId  Int
  movie   Movie     @relation(fields: [movieId], references: [id])
  movieId Int

  @@unique([listId, movieId])
}

model Book {
  id              Int      @id @default(autoincrement())
  authors         String[]
  description     String
  genres          String[]
  googleId        String   @unique
  pages           Int
  publicationDate DateTime @db.Date
  subtitle        String?
  title           String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listed BookListItem[]
}

model BookList {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  books  BookListItem[]

  @@unique([userId, name])
}

model BookListItem {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  list   BookList @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId Int
  book   Book     @relation(fields: [bookId], references: [id])
  bookId Int

  @@unique([listId, bookId])
}

model Metric {
  id   Int     @id @default(autoincrement())
  name String
  unit String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  entries MetricEntry[]

  @@unique([userId, name])
}

model MetricEntry {
  id    Int      @id @default(autoincrement())
  value String
  date  DateTime @db.Date

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  metric   Metric @relation(fields: [metricId], references: [id], onDelete: Cascade)
  metricId Int

  @@unique([metricId, date])
}

model Document {
  id       String  @id @default(uuid())
  title    String
  body     String?
  isPublic Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([userId, title])
}

model Workout {
  id                Int      @id @default(autoincrement())
  name              String
  date              DateTime @db.Date
  startTime         DateTime @db.Time
  endTime           DateTime @db.Time
  durationInSeconds Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model BackgroundJob {
  id        Int       @id @default(autoincrement())
  attempts  Int       @default(0)
  handler   String
  queue     String
  priority  Int
  runAt     DateTime?
  lockedAt  DateTime?
  lockedBy  String?
  lastError String?
  failedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model RW_DataMigration {
  version    String   @id
  name       String
  startedAt  DateTime
  finishedAt DateTime
}
