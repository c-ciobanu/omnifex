datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  Int       @id @default(autoincrement())
  email               String    @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favoriteMovies  FavoritedMovie[]
  watchedMovies   WatchedMovie[]
  moviesWatchlist WatchlistItemMovie[]
}

model Movie {
  id             Int      @id @default(autoincrement())
  genres         String[]
  imdbId         String   @unique
  overview       String
  rating         Decimal  @db.Decimal(3, 1)
  releaseDate    DateTime @db.Date
  runtime        Int
  tagline        String
  title          String
  tmdbId         Int      @unique
  tmdbPosterPath String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favorited   FavoritedMovie[]
  watched     WatchedMovie[]
  watchlisted WatchlistItemMovie[]
}

model FavoritedMovie {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int

  @@unique([movieId, userId])
}

model WatchedMovie {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int

  @@unique([movieId, userId])
}

model WatchlistItemMovie {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int

  @@unique([movieId, userId])
}
