datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  Int       @id @default(autoincrement())
  email               String?   @unique
  username            String    @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favoritedMovies FavoritedMovie[]
  watchedMovies   WatchedMovie[]
  moviesToWatch   ToWatchMovie[]
  favoritedBooks  FavoritedBook[]
  readBooks       ReadBook[]
  booksToRead     ToReadBook[]
  metrics         Metric[]
  documents       Document[]
}

model Movie {
  id             Int      @id @default(autoincrement())
  genres         String[]
  imdbId         String   @unique
  overview       String
  rating         Decimal  @db.Decimal(3, 1)
  releaseDate    DateTime @db.Date
  runtime        Int
  tagline        String
  title          String
  tmdbId         Int      @unique
  tmdbPosterPath String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favorited FavoritedMovie[]
  watched   WatchedMovie[]
  toWatch   ToWatchMovie[]
}

model FavoritedMovie {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int

  @@unique([movieId, userId])
}

model WatchedMovie {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int

  @@unique([movieId, userId])
}

model ToWatchMovie {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int

  @@unique([movieId, userId])
}

model Book {
  id              Int      @id @default(autoincrement())
  authors         String[]
  description     String
  genres          String[]
  googleId        String   @unique
  pages           Int
  publicationDate DateTime @db.Date
  subtitle        String?
  title           String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favorited FavoritedBook[]
  read      ReadBook[]
  toRead    ToReadBook[]
}

model FavoritedBook {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  book   Book @relation(fields: [bookId], references: [id])
  bookId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([bookId, userId])
}

model ReadBook {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  book   Book @relation(fields: [bookId], references: [id])
  bookId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([bookId, userId])
}

model ToReadBook {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  book   Book @relation(fields: [bookId], references: [id])
  bookId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([bookId, userId])
}

model Metric {
  id   Int     @id @default(autoincrement())
  name String
  unit String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User          @relation(fields: [userId], references: [id])
  userId  Int
  entries MetricEntry[]

  @@unique([userId, name])
}

model MetricEntry {
  id    Int      @id @default(autoincrement())
  value String
  date  DateTime @db.Date

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  metric   Metric @relation(fields: [metricId], references: [id], onDelete: Cascade)
  metricId Int

  @@unique([metricId, date])
}

model Document {
  id    String  @id @default(uuid())
  title String
  body  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, title])
}
